# Stoppa bubblorna!!
# Gjord av Samuel Maniscalchi Bäckman
#------------------------------------

from tkinter import *
from random import randint
from time import sleep, time
from math import sqrt

window = Tk()
HEIGHT = 500
WIDTH = 800
window.title("stop the bubbles")

c = Canvas(window, width=WIDTH, height=HEIGHT, bg="darkblue")
c.pack()

# röd spelare
ship_id = c.create_polygon(5, 5, 5, 25, 30, 15, fill="red")
ship_id2 = c.create_oval(0, 0, 30, 30, outline="red")

# röd spelare försök på bild
#----------------------
#img = PhotoImage(file="/home/kali/Pictures/emoji.png")
#c.create_image(10, 10, anchor=NW, image=img)
#-----------------------
SHIP_R = 15
MID_X = WIDTH / 3
MID_Y = HEIGHT / 2
c.move(ship_id, MID_X, MID_Y)
c.move(ship_id2, MID_X, MID_Y)

# gul spelare
ship_id3 = c.create_polygon(5, 5, 5, 25, 30, 15, fill="yellow")
ship_id4 = c.create_oval(0, 0, 30, 30, outline="yellow")
SHIP_R2 = 15
MID_X2 = WIDTH / 3
MID_Y2 = HEIGHT / 3
c.move(ship_id3, MID_X2, MID_Y2)
c.move(ship_id4, MID_X2, MID_Y2)

BUB_CHANGE = 10
TIME_LIMIT = 10
BONUS_SCORE = 1000
score = 0
bonus = 0
end = time() + TIME_LIMIT

score2 = 0
bonus2 = 0
BONUS_SCORE2 = 1000
end2 = time() + TIME_LIMIT

SHIP_SPD = 10


def move_ship_red(event):
	if event.keysym == "Up":
		c.move(ship_id, 0, -SHIP_SPD)
		c.move(ship_id2, 0, -SHIP_SPD)
	elif event.keysym == "Down":
		c.move(ship_id, 0, SHIP_SPD)
		c.move(ship_id2, 0, SHIP_SPD)
	elif event.keysym == "Left":
		c.move(ship_id, -SHIP_SPD, 0)
		c.move(ship_id2, -SHIP_SPD, 0)
	elif event.keysym == "Right":
		c.move(ship_id, SHIP_SPD, 0)
		c.move(ship_id2, SHIP_SPD, 0)

c.bind_all("<Key>", move_ship_red)
def move_ship_yell(event):
	if event.keysym == "w":
		c.move(ship_id3, 0, -SHIP_SPD)
		c.move(ship_id4, 0, -SHIP_SPD)
	elif event.keysym == "s":
		c.move(ship_id3, 0, SHIP_SPD)
		c.move(ship_id4, 0, SHIP_SPD)
	elif event.keysym == "a":
		c.move(ship_id3, -SHIP_SPD, 0)
		c.move(ship_id4, -SHIP_SPD, 0)
	elif event.keysym == "d":
		c.move(ship_id3, SHIP_SPD, 0)
		c.move(ship_id4, SHIP_SPD, 0)
	
c.bind_all("<w>", move_ship_yell)
c.bind_all("<s>", move_ship_yell)
c.bind_all("<a>", move_ship_yell)
c.bind_all("<d>", move_ship_yell)

bub_id = list()
bub_r = list()
bub_speed = list()

MIN_BUB_R = 10
MAX_BUB_R = 30
MAX_BUB_SPD = 10

GAP = 100

def create_bubble():
	x = WIDTH + GAP
	y = randint(0, HEIGHT)
	r = randint(MIN_BUB_R, MAX_BUB_R)
	id1 = c.create_oval(x - r, y - r, x + r, y + r, outline="white")
	bub_id.append(id1)
	bub_r.append(r)
	bub_speed.append(randint(1, MAX_BUB_SPD))
	
		
def move_bubbles():
	for i in range(len(bub_id)):
		c.move(bub_id[i], -bub_speed[i], 0)
		
def get_coords(id_num):
	pos = c.coords(id_num)
	x = (pos[0] + pos[2]) / 2
	y = (pos[1] + pos[3]) / 2
	return x, y
	
	


# få bubblorna att spricka

# funktionen tar bort bubblan från canvasen
def del_bubble(i):
	del bub_r[i]
	del bub_speed[i]
	c.delete(bub_id[i])
	del bub_id[i]
	
# funtkionen tar bort bubblor som hamnat utanför skärmen.
def clean_up_bubs():
	for i in range(len(bub_id)-1, -1, -1):
		x, y = get_coords(bub_id[i])
		if x < -GAP:
			del_bubble(i)
			
# räknar ut avståndet mellan punkter	
def distance(id1, id2):
	x1, y1, = get_coords(id1)
	x2, y2, = get_coords(id2)
	return sqrt((x2 - x1)**2 + (y2 - y1)**2)
	
# håller koll på poängen
def collision():
	points = 0
	points2 = 0
	for bub in range(len(bub_id)-1, -1, -1):
		if distance(ship_id2, bub_id[bub]) < (SHIP_R + bub_r[bub]):
			points += (bub_r[bub] + bub_speed[bub])
			del_bubble(bub)
	
	for bub in range(len(bub_id)-1, -1, -1):
		if distance(ship_id4, bub_id[bub]) < (SHIP_R2 + bub_r[bub]):
			points2 += (bub_r[bub] + bub_speed[bub])
			del_bubble(bub)
	return points
	
# röd spelares poäng + tid för båda	
c.create_text(50, 40, text="TID:", fill="white", font=("helvetica", 20))
c.create_text(150, 30, text="POÄNG", fill="red")

time_text = c.create_text(50, 70, fill="white", font=("helvetica", 20))
sek_text = c.create_text(80, 70, text="sek", fill="white", font=("helvetica", 15))

score_text = c.create_text(150, 50, fill="red")

# gul spelares poäng 
c.create_text(350, 30, text="POÄNG", fill="yellow")

score_text2 = c.create_text(350, 50, fill="yellow")

def show_score(score):
	c.itemconfig(score_text, text=str(score))

def show_time(time_left):
	c.itemconfig(time_text, text=str(time_left))


def show_score2(score):
	c.itemconfig(score_text2, text=str(score2))
	




BUB_CHANGE = 10
# huvudlopen, spelet utgår från denna
while time() < end:
	if randint(1, BUB_CHANGE) == 1:
		create_bubble()
	move_bubbles()
	clean_up_bubs()
	score += collision()
	if (int(score / BONUS_SCORE)) > bonus:
		bonus += 1
		end += TIME_LIMIT
	if (int(score2 / BONUS_SCORE2)) > bonus2:
		bonus2 += 1
		end2 += TIME_LIMIT 			
	show_score(score)
	show_time(int(end - time()))
	show_score2(score)
	
	window.update()
	sleep(0.01)
#def igen():
#	window.destroy()
#	root = Tk()
#	root.geometry("800x500")
#	kan_ej = Label(root, text="vet inte hur man startar om. . . .")
#	kan_ej.pack()
#	root.mainloop()

# GAME OVER
c.create_text(MID_X, MID_Y, \
	text="GAME OVER", fill="white", font=("Helvetica", 30))
c.create_text(MID_X, MID_Y + 30, \
	text="päng: " + str(score), fill="red")
c.create_text(MID_X, MID_Y + 45, \
	text="Extratid: " + str(bonus*TIME_LIMIT), fill="red")

c.create_text(270, 330, \
	text="päng: " + str(score2), fill="yellow")
c.create_text(270, 345, \
	text="Extratid: " + str(bonus2*TIME_LIMIT), fill="yellow")
#butt = Button(window, text="starta om", font=("helvetica", 25), command=igen)
#butt.pack()
		
		
window.mainloop()
